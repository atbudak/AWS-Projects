AWSTemplateFormatVersion: 2010-09-09
Description: |
  This temp creates an ASG behind an ALB.  

Parameters:
  DBPassword:
    NoEcho: "true"
    Description: The database admin account password
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.

  myKP:
    Description: Select your KP
    Type: AWS::EC2::KeyPair::KeyName

  myIT:
    Description: Select the instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t2.nano
      - t3.nano

  mySubnets:
    Description: Please select at least 2 subnets. 
    Type: List<AWS::EC2::Subnet::Id>

  myVPC:
    Description: Please select VPC 
    Type: AWS::EC2::VPC::Id

Mappings:
  RegionImageMap:
    us-east-1:
      AMI: ami-0dc2d3e4c0f9ebd18
    us-east-2:
      AMI: ami-0233c2d874b811deb
    us-west-1:
      AMI: ami-0ed05376b59b90e46
    us-west-2:
      AMI: ami-0dc8f589abe99f538
    eu-west-1:
      AMI: ami-058b1b7fe545997ae

Resources:

  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: clarusway_phonebook
      AllocatedStorage: "20"
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      EngineVersion: 8.0.19
      MasterUsername: admin
      MasterUserPassword: !Ref DBPassword
      DBParameterGroupName: clarusway_phonebook
      VPCSecurityGroups:
        - !GetAtt myBDSecGrp.GroupId
    DeletionPolicy: Delete

  myListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: # Required
        - Type: forward
          TargetGroupArn: !Ref myTG 
      LoadBalancerArn: !Ref myALB # Required
      Port: 80
      Protocol: HTTP

  myALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !GetAtt mySG.GroupId 
      Subnets: !Ref mySubnets 
      Type: application


  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs 
      DesiredCapacity: "2"
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref myLT
        Version: "1"
      MaxSize: "3" # Required
      MinSize: "1" # Required
      TargetGroupARNs:
        - !Ref myTG

  myCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref myASG  # Required
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60.0

  myLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap
          - RegionImageMap
          - !Ref AWS::Region
          - AMI
        InstanceType: !Ref myIT
        KeyName: !Ref myKP
        SecurityGroupIds:
          - !GetAtt mySG.GroupId
        UserData: 
          Fn::Base64: 
            |
            #! /bin/bash
            yum update -y
            yum install git -y
            sudo pip3 install flask
            sudo pip3 install flask-mysql
            git clone https://github.com/atbudak/AWS-Projects.git .
            mkdir /home/ec2-user/phonebookdir && cd /home/ec2-user/phonebookdir
            cp -R /home/ec2-user/Project-3/Project-004-Phonebook-Application/* /home/ec2-user/phonebookdir
            export DB_CONNECTION="${myDB.Endpoint.Address}"
            echo $DB_CONNECTION > /home/ec2-user/dbserver.endpoint
            sudo python3 /home/ec2-user/phonebookdir/phonebook-app.py

  myTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: !Ref myVPC

  mySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enables SSH and HTTP" # Required
      SecurityGroupIngress:
        -   CidrIp: 0.0.0.0/0
            FromPort: 22
            ToPort: 22
            IpProtocol: tcp

        -   CidrIp: 0.0.0.0/0
            FromPort: 80
            ToPort: 80
            IpProtocol: tcp

      VpcId: !Ref myVPC
    
  myBDSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MySQL securty group # Required
      GroupName: MySQL-Sec
      SecurityGroupIngress:    
        -   CidrIp: 0.0.0.0/0
            FromPort: 3306
            ToPort: 3306
            IpProtocol: tcp
      Tags:
        - Key: Name
          Value: MySQL-Sec-Grp
      VpcId: !Ref myVPC



Outputs:

  AppUrl:
    Description: Url of the ALB
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt myALB.DNSName 
    
  JDBCConnectionString:
    Description: JDBC connection string for the database
    Value:
      Fn::Join:
        - ""
        - - jdbc:mysql://
          - Fn::GetAtt:
              - MyDB
              - Endpoint.Address
          - ":"
          - Fn::GetAtt:
              - MyDB
              - Endpoint.Port
          - /
          - clarusway_phonebook